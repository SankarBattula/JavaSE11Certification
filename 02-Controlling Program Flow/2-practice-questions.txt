
1. Variables declared as which of the following are never permitted in a switch statement?
    (Choose two.)

    A. var
    B. double
    C. int
    D. String
    E. char
    F. Object

    Explanation :
    B,F. A switch statement supports the primitive types byte, short, char, and int and the wrapper classes Character, Byte, Short, and Integer. 
    It also supports String and enumerated types. Finally, it permits var if it can be resolved to one of the previous types. 
    Floating-point types like float and double are not supported; therefore, option B is correct. 
    Object is also not supported since it could include any class, making option F correct as well.

2. What happens when running the following code snippet?
    3: var gas = true;
    4: do (
    5:      System.out.println("helium");
    6:      gas = gas ^ gas;
    7:      gas = !gas;
    8: ) while (!gas);

    A. It completes successfully without output.
    B. It outputs helium once.
    C. It outputs helium repeatedly.
    D. Line 6 does not compile.
    E. None of the above.

    Explanation :
    E. The code does not compile because parentheses, (), are used instead of braces, {}, making option E the correct answer. 
    If the code was fixed to use braces, then option B would be the correct answer. The exclusive or (^) of two true values is false. 
    Therefore, gas would be true at the end of the first loop and would exit since the loop condition !gas is false.

3. What is output by the following?
    10: int m = 0, n = 0;
    11: while (m < 5) {
    12:     n++;
    13:     if (m == 3)
    14:         continue;
    15:
    16:     switch (m) {
    17:         case 0:
    18:         case 1:
    19:             n++;
    20:         default:
    21:         n++;
    22:     }
    23:     m++;
    24: }
    25: System.out.println(m + " " + n);

    A. 3 10
    B. 3 12
    C. 5 10
    D. 5 12
    E. The code does not compile.
    F. None of the above.

    Explanation :
    F. When getting this type of question, the best approach is to write down the values of the variables. Both start out as 0 on line 10. 
    On the first iteration of the loop, n becomes 1, while m remains 0, so the clause in the if statement doesn’t run. 
    In the switch statement, the value of m remains 0, so it matches the first case. 
    Since there is no break, the default block is also executed, and n is incremented twice and is now 3. Finally, m is incremented to 1.

    On the second iteration of the loop, m goes from 1 to 2, and n goes from 3 to 6. On the third iteration, m goes from 2 to 3, and n goes from 6 to 8. 
    On the fourth iteration m is 3, and the continue is executed with only n increasing in value by 1. 
    This pattern continues with the loop never terminating, while n continues to increase by 1. 
    Since the execution does not complete, option F is the correct answer

4. Given the following, which can fill in the blank and allow the code to compile?
    (Choose three.)
    var quest = _________;
    for(var zelda : quest) {
        System.out.print(zelda);
    }

    A. 3
    B. new int[] {3}
    C. new StringBuilder("3")
    D. List.of(3)
    E. new String[3]
    F. "Link"

    Explanation :
    B,D,E. A for-each loop accepts arrays and classes that implement java.lang.Iterable, such as List. For these reasons, options B, D, and E are correct. 
    Option A is incorrect because it is a primitive value. 
    Options C and F are incorrect because StringBuilder and String do not implement Iterable.

5. Which of the following rules about a default branch in a switch statement are correct?
    (Choose two.)
    A. A switch statement is required to declare a default statement.
    B. A default statement must be placed after all case statements.
    C. A default statement can be placed between any case statements.
    D. Unlike a case statement, a default statement does not take a parameter value.
    E. A switch statement can contain more than one default statement.
    F. A default statement can be used only when at least one case statement is present.

    Explanation :
    C,D. A default statement inside a switch statement is optional and can be placed in any order within the switch’s case statements, making options A and B incorrect and option C correct. 
    Option D is also correct because a default statement does not take a parameter value. Options E and F are incorrect rules about switch statements.

6. What does the following method output?
    void dance() {
        var singer = 0;
        while (singer)
            System.out.print(singer++);
    }

    A. The code does not compile.
    B. The method completes with no output.
    C. The method prints 0 and then terminates.
    D. The method enters an infinite loop.
    E. None of the above

    Explanation :
    A. A while loop requires a boolean condition. While singer is a variable, it is not a boolean. Therefore, the code does not compile, and option A is correct.

7. Which are true statements comparing for-each and traditional for loops? (Choose two.)
    A. Both can iterate through an array starting with the first element.
    B. Only the for-each loop can iterate through an array starting with the first element.
    C. Only the traditional for loop can iterate through an array starting with the first element.
    D. Both can iterate through an array starting from the end.
    E. Only the for-each loop can iterate through an array starting from the end.
    F. Only the traditional for loop can iterate through an array starting from the end.

    Explanation :
    A,F. A traditional for loop gives you full control over the order of iteration. This means you can iterate through the array backward or forward. 
    By contrast, with a for-each loop, the iteration order is determined for you. With an array, this means starting with index 0. 
    Options A and F match this scenario.

8. What is the output of the following application?
    package planning;
    public class ThePlan {
        public static void main(String[] input) {
            var plan = 1;
            plan = plan++ + --plan;
            if(plan==1) {
                System.out.print("Plan A");
            } else { if(plan==2) System.out.print("Plan B");
            } else System.out.print("Plan C"); }
        }
    }

    A. Plan A
    B. Plan B
    C. Plan C
    D. The class does not compile.
    E. None of the above.

    Explanation :
    D. This code does not compile because it has two else statements as part of a single if statement. 
    Notice that the second if statement is not connected to the last else statement. 
    For this reason, option D is the correct answer.

9. What is true about the following code? (Choose two.)
    23: var race = "";
    24: loop:
    25: do {
    26:     race += "x";
    27:     break loop;
    28: } while (true);
    29: System.out.println(race);

    A. It outputs x.
    B. It does not compile.
    C. It is an infinite loop.
    D. With lines 25 and 28 removed, it outputs x.
    E. With lines 25 and 28 removed, it does not compile.
    F. With lines 25 and 28 removed, it is an infinite loop.

    Explanation :
    A,E. The code compiles as is. Due to the break statement on line 27, the loop executes only once. It prints a single x, which means option A is the first correct answer. 
    While the label on line 24 is present with lines 25 and 28 removed, it no longer points to a loop. 
    This causes the code to not compile, and option E is the other correct answer.

10. Which of the following can replace the body of the perform() method to produce the same
    output on any nonempty input? (Choose two.)
    public void perform(String[] circus) {
        for (int i=circus.length-1; i>=0; i--)
            System.out.print(circus[i]);
    }
    A.
    for (int i=circus.length; i>0; i--)
        System.out.print(circus[i-1]);
    B.
    for-reversed (String c = circus)
        System.out.print(c);
    C.
    for (var c : circus)
        System.out.print(c);
    D.
    for(var i=0; i<circus.length; i++)
        System.out.print(circus[circus.length-i-1]);
    E.
    for (int i=circus.length; i>0; i--)
        System.out.print(circus[i+1]);
    F.
    for-each (String c circus)
        System.out.print(c);

    Explanation :
    A,D. The method prints the elements of the array in the reverse order in which they are defined. Option A correctly accomplishes this using a different starting value for the loop. 
    Options B and F do not compile, as they do not use the correct syntax in a for-each loop. 
    Option C compiles and runs without issue, but prints the items in their natural ordering, as opposed to the reverse ordering. 
    Option D is correct, as it increments in positive order but reverses the output within the body of the for loop. 
    Finally, option E is incorrect. 
    The first element read is circus[circus.length+1], which results in an ArrayIndexOutOfBoundsException.

11. What does the following code snippet output?
    var bottles = List.of("glass", "plastic", "can");
    for (int type = 1; type < bottles.size();) {
        System.out.print(bottles.get(type) + "-");
        if(type < bottles.size()) break;
    }
    System.out.print("end");

    A. glass-end
    B. glass-plastic-can-end
    C. plastic-end
    D. plastic-can-end
    E. The code does not compile.
    F. None of the above.

    Explanation :
    C. The first time through the loop, type is 1, and plastic- is output. The break statement then terminates the loop, with end bring printed. 
    If the break keyword was removed, then this would be an infinite loop because type is not incremented between loop executions.

12. What is the result of executing the following code snippet?
    final var GOOD = 100;
    var score = 10;
    switch (score) {
        default:
        1 : System.out.print("1-");
        -1 : System.out.print("2-"); break;
        4,5 : System.out.print("3-");
        6 : System.out.print("4-");
        9 : System.out.print("5-");
        }

    A. 1-
    B. 1-2-
    C. 2-
    D. 3-
    E. 4-
    F. None of the above

    Explanation :
    F. The code does not compile because the switch statement is missing the case keyword for each value. Also, two case values cannot be combined as in 4,5.

13. What is the output of the following application?
    package dinosaur;
    public class Park {
        public final static void main(String... arguments) {
            int pterodactyl = 8;
            long triceratops = 3;
            if(pterodactyl % 3 > 1 + 1)
                triceratops++;
                triceratops--;
            System.out.print(triceratops);
        }
    }

    A. 2
    B. 3
    C. 4
    D. The code does not compile.
    E. The code compiles but throws an exception at runtime.

    Explanation :
    A. First, determine whether the if statement’s expression is executed. The expression 8 % 3 evaluates to 2. 
    The right-hand side of the expression is evaluated next since + has a higher precedence than >. Since 2 > 2 is false, the expression triceratops++ is not called. 
    Notice there are no braces, {}, in the if statement. Despite the triceratops–– line being indented, it is not part of the if statement. 
    Therefore, triceratops–– is always executed, resulting in a value of 2 for triceratops, and making option A the correct answer.

14. What variable type of red allows the following application to compile?
    package tornado;
    public class Kansas {
        public static void main(String[] args) {
            int colorOfRainbow = 10;
            __________ red = 5;
            switch(colorOfRainbow) {
                default:
                    System.out.print("Home");
                    break;
                case red:
                    System.out.print("Away");
            }
        }
    }

    A. long
    B. double
    C. int
    D. var
    E. String
    F. None of the above

    Explanation :
    F. The value of a case statement must be a constant, a literal value, or a final variable. 
    Since red is missing the final attribute, no variable type allows the code to compile, making option F the correct answer. 
    If the final modifier was added to the declaration of red, then int or var would be correct. 
    The other options use types that are incompatible with switch statements or with colorOfRainbow.

15. How many lines of the magic() method contain compilation errors?
    10: public void magic() {
    11:     do {
    12:         int trick = 0;
    13:         LOOP: do {
    14:             trick++;
    15:         } while (trick < 2--);
    16:         continue LOOP;
    17:     } while (1 > 2);
    18:     System.out.println(trick);
    19: }

    A. Zero
    B. One
    C. Two
    D. Three
    E. Four

    Explanation :
    D. Line 15 does not compile because the post-decrement operator can be applied only to variables, not values. 
    Line 16 also does not compile because the label LOOP is out of scope after line 15. 
    Finally, line 18 does not compile because trick is declared within the do/while loop and out of scope after line 17. 
    For these reasons, option D is the correct answer.

16. How many of these statements can be inserted after the println to have the code flow follow
    the arrow in this diagram?
    break;
    break letters;
    break numbers;
    continue;
    continue letters;
    continue numbers;

            |------> letters: for (char ch = 'a'; ch <= 'z'; ch++) {
            |            numbers: for (int n = 0; n<=10; n++) {
            |                System.out.print(ch);
            |________________
                        }
                    }
    A. One
    B. Two
    C. Three
    D. Four
    E. Five
    F. None of above

    Explanation :
    C. If the code follows the arrow, then it prints each letter once, breaking out of the inner loop on every iteration. 
    Since a break without a label applies to the innermost structure, break and break numbers are equivalent, and both of these are correct answers. 
    Likewise, continue and continue numbers are both equivalent although both wrong in this case since they resume operation of the inner loop. 
    That leaves break letters and continue letters. In this case, break letters stops the outer loop after printing just one letter, so it is incorrect. 
    On the other hand, continue letters exits the inner loop and returns control to the outer loop, which is the desired behavior. 
    Since three statements are correct, option C is correct.

17. What is the output of the following application?
    package dessert;
    public class IceCream {
        public final static void main(String... args) {
            var flavors = 30;
            int eaten = 0;
            switch(flavors) {
                case 30: eaten++;
                case 40: eaten+=2;
                default: eaten--;
            }
            System.out.print(eaten);
        }
    }

    A. 1
    B. 2
    C. 3
    D. The code does not compile because var cannot be used in a switch statement.
    E. The code does not compile for another reason.
    F. None of the above.

    Explanation :
    B. The code compiles without issue, so options D and E are incorrect. A var can be used in a switch statement, provided the underlying type resolves to a supported switch type. 
    Next, notice there are no break statements. Once the matching case statement, 30, is reached, all remaining case statements will be executed. 
    The variable eaten is increased by 1, then 2, then reduced by 1, resulting in a final value of 2, making option B the correct answer.

18. Which of the following statements compile and create infinite loops at runtime?
    (Choose two.)

    A. while (!false) {}
    B. do {}
    C. for( : ) {}
    D. do {} while (true);
    E. while {}
    F. for( ; ; ) {}

    Explanation :
    A,D,F. A while loop and do/while loop both require a boolean expression, making options A and D correct and options B and E incorrect. 
    Option C is incorrect because a foreach statement requires an assignment type and an object to iterate on. 
    Option F is correct and shows a traditional for loop with no arguments.

19. Which of the following iterates a different number of times than the others?

    A. for (int k=0; k < 5; k++) {}
    B. for (int k=1; k <= 5; k++) {}
    C. int k=0; do { } while(k++ < 5);
    D. int k=0; while (k++ < 5) {}
    E. All of these iterate the same number of times.

    Explanation :
    C. Option A goes through five indexes on the iterations: 0, 1, 2, 3, and 4. Option B also goes through five indexes: 1, 2, 3, 4, and 5. 
    Option D goes through five iterations as well, from 0 to 4. However, option C goes through six iterations since the loop condition is at the end of the loop. 
    Therefore, it is not like the others, and option C is the correct answer.

20. What is the output of the following code snippet?
    int count = 0;
    var stops = new String[] { "Washington", "Monroe",
        "Jackson", "LaSalle" };
    while (count < stops.length)
        if (stops[++count].length() < 8)
            break;
        else continue;
    System.out.println(count);

    A. 0
    B. 1
    C. 2
    D. 3
    E. The code does not compile.
    F. None of the above.

    Explanation :
    B. On the first iteration of the loop, stops[++count] evaluates to stops[1], while also setting count to 1. 
    Since stops[1] is Monroe and it has six characters, the break is reached, and the loop stops. 
    For this reason, 1 is printed, making option B correct.

21. What is the output of the following code snippet?
    int hops = 0;
    int jumps = 0;
    jumps = hops++;
    if(jumps)
        System.out.print("Jump!");
    else
        System.out.print("Hop!");

    A. Jump!
    B. Hop!
    C. The code does not compile.
    D. The code compiles but throws an exception at runtime.
    E. None of the above.

    Explanation :
    C. The statement if(jumps) evaluates to if(0), and since 0 is not a boolean value, the code does not compile. 
    Java requires boolean expressions in if statements.

22. Which of the following best describes the flow of execution in this for loop if beta always
    returns false?
    for (alpha; beta; gamma) {
        delta;
    }

    A. alpha
    B. alpha, beta
    C. alpha, beta, gamma
    D. alpha, gamma
    E. alpha, gamma, beta
    F. None of the above

    Explanation :
    B. The initializer, which is alpha, runs first. Then Java checks the condition, which is beta, to see whether loop execution should start. 
    Since beta returns false, the loop is never entered, and option B is correct.

23. What is the output of the following code snippet?
    boolean balloonInflated = false;
    do {
        if (!balloonInflated) {
            balloonInflated = true;
            System.out.print("inflate-");
        }
    } while (! balloonInflated);
    System.out.println("done");

    A. done
    B. inflate-done
    C. The code does not compile.
    D. This is an infinite loop.
    E. None of the above.

    Explanation :
    B. On the first iteration of the loop, the if statement executes and prints inflate-. Then the loop condition is checked. 
    The variable balloonInflated is true, so the loop condition is false, and the loop completes and done is printed.

24. Which of these code snippets behaves differently from the others?
    A.
    if (numChipmunks == 1)
        System.out.println("One chipmunk");
    if (numChipmunks == 2)
        System.out.println("Two chipmunks");
    if (numChipmunks == 3)
        System.out.println("Three chipmunks");

    B.
    switch (numChipmunks) {
        case 1: System.out.println("One chipmunk");
        case 2: System.out.println("Two chipmunks");
        case 3: System.out.println("Three chipmunks");
    }

    C.
    if (numChipmunks == 1)
        System.out.println("One chipmunk");
    else if (numChipmunks == 2)
        System.out.println("Two chipmunks");
    else if (numChipmunks == 3)
        System.out.println("Three chipmunks");

    D. All three code snippets do the same thing.

    Explanation :
    B. Options A and C print one line if numChipmunks is 1, 2, or 3. Option B does not behave the same way if numChipmunks is 1 or 2. 
    There is no break statement, so the case statements fall through, and more than one statement will be printed.

25. Which statements about loops are correct? (Choose three.)

    A. A do/while loop requires a body.
    B. A while loop cannot be exited early with a return statement.
    C. A while loop requires a conditional expression.
    D. A do/while loop executes the body (if present) at least once.
    E. A do/while loop cannot be exited early with a return statement.
    F. A while loop executes the body (if present) at least once.

    Explanation :
    A,C,D. A do/while loop requires a body, making option A correct. Options B and E are incorrect, as both types of while loops can be exited early with a return statement. 
    Both also require a conditional expression, making option C correct. 
    What distinguishes a do/while loop from a while loop is that it executes its body at least once, making option D correct and option F incorrect.

26. Given the following enum and class, which option fills in the blank and allows the code
    to compile?
    enum Season { SPRING, SUMMER, WINTER }
    public class Weather {
        public int getAverageTemperate(Season s) {
            switch (s) {
                default:
                __________ return 30;
            }
        }
    }

    A. case Season.WINTER:
    B. case WINTER, SPRING:
    C. case SUMMER | WINTER:
    D. case SUMMER ->
    E. case FALL:
    F. None of the above

    Explanation :
    F. Option A is incorrect because the enum type Season is not used within a case statement. If it were just case WINTER:, then it would compile. 
    Options B and C do not compile because switch statements do not support multiple values within a case statement. 
    Option D is incorrect because -> is used instead of :. Option E is incorrect because FALL is not defined in the list of values for the enum Season. 
    Since none of the lines of code is correct, option F is correct.

27. Fill in the blank with the line of code that causes the application to compile and print exactly
    one line at runtime.
    package nyc;
        public class TourBus {
        public static void main(String... args) {
            var nycTour = new String[] { "Downtown", "Uptown",
                "Brooklyn" };
            var times = new String[] { "Day", "Night" };
            for ( i<nycTour.length && j<times.length;
                    i++, j++)
                System.out.println(nycTour[i] + "-" + times[j]);
        }
    }

    A. int i=1; j=1;
    B. int i=0, j=1;
    C. int i=1; int j=0;
    D. int i=1, int j=0;
    E. int i=1, j=0;
    F. None of the above

    Explanation :
    B. In a traditional for loop, only one initialization type is allowed to be specified. If more than one variable is supplied, then they are separated by a comma. 
    Therefore, options A, C, and D do not compile. Options B and E both compile, although only option B prints a single line at runtime. 
    Option E instead prints two lines since nycTour is of size 3 and times is of size 2.

28. The code contains six pairs of curly braces. How many pairs can be removed without changing
    the behavior?
    12: public static void main(String[] args) {
    13:     int secret = 0;
    14:     for (int i = 0; i < 10; i++) {
    15:         while (i < 10) {
    16:             if (i == 5) {
    17:                 System.out.println("if");
    18:             } else {
    19:                 System.out.println("in");
    20:                 System.out.println("else");
    21:             }
    22:         }
    23:     }
    24:     switch (secret) {
    25:         case 0: System.out.println("zero");
    26:     }
    27: }

    A. One
    B. Two
    C. Three
    D. Four
    E. Five
    F. Six

    Explanation :
    C. The braces on lines 12/27 are required because they comprise the method body. 
    The braces on lines 24/26 are required because a switch statement needs braces regardless of how many case statements are inside. 
    Finally, the braces on lines 18/21 are required because the else has two statements inside.
    The braces on lines 14/23, 15/22, and 16/18 are all optional because there is only one statement inside. Since there are three pairs, option C is correct.

29. Which of the following can replace the body of the travel() method to produce the same
    output on any nonempty input?

    public void travel(List<Integer> roads) {
        for (int w = 1; w <= roads.size(); w++)
            System.out.print(roads.get(w-1));
    }

    A.
    for (int r = 0; r < roads.size(); r += 1)
        System.out.print(roads.get(0));
    B.
    for(var z : roads)
        System.out.print(z);
    C.
    for (int t = roads.size(); t > 0; t--)
        System.out.print(roads.get(t));
    D.
    for (var var : roads)
        System.out.print(roads);
    E.
    for (int q = roads.size(); q >= 0; q++)
        System.out.print(roads.get(q));
    F. None of the above

    Explanation :
    B. The method prints the elements of the list in the order in which they are defined. 
    Option A is incorrect and prints the first element repeatedly. 
    Option B is correct and prints the elements using a for-each loop. 
    Options C and E are incorrect because the first element read results in an ArrayIndexOutOfBoundsException. 
    Finally, option D is incorrect because the entire list is printed each time.

30. Which statement about the following code snippet is correct?
    3: final var javaVersions = List.of(9,10,11);
    4: var exams = List.of("1Z0-811", "1Z0-819");
    5: V: for (var e1 : javaVersions) {
    6:      E: for (String e2 : exams)
    7:          System.out.println(e1 + "_" + e2);
    8:          break;
    9: }

    A. One line does not compile.
    B. Two lines do not compile.
    C. Three lines do not compile.
    D. It compiles and prints two lines at runtime.
    E. It compiles and prints three lines at runtime.
    F. None of the above.

    Explanation :
    D. The code snippet compiles, making options A, B, and C incorrect. 
    Notice that the inner for-each loop does not use braces, {}, so the break statement applies to the outer loop only. 
    On the first iteration of the outer loop, the inner loop prints 9_1Z0-811 and 9_1Z0-819. 
    Then, the break statement is encountered, and the outer loop is terminated, making option D correct. 
    If braces were added around lines 7 and 8, then the code would instead print 9_1Z0-811, 10_1Z0-811, and 11_1Z0-811, and option E would be correct.